=pod

=head1 NAME

Log::Dis::Patchy - Custom Log::Dispatch loggers made easy.

=head1 VERSION

version 0.001

=head1 SYNOPSIS

    # see t/trivia.t
    {
        package TrivialOutput;
        use Moo;

        use Log::Dis::Patchy::Helpers qw(append_newline_callback);

        sub _build_ldo_name         {'an_output'}
        sub _build_ldo_package_name {'Log::Dispatch::Screen'}

        with 'Log::Dis::Patchy::Output';

        around _build_ldo_init_args => sub {
            my ( $orig, $self ) = ( shift, shift );
            my $args = $self->$orig(@_);

            $args->{callbacks} = [ append_newline_callback() ];
            return $args;
        };
    }

    {
        package TrivialLogger;
        use Moo;

        use Log::Dis::Patchy::Helpers qw(prepend_pid_callback);

        sub _build_outputs   { ['TrivialOutput'] }
        sub _build_callbacks { [prepend_pid_callback] }

        with qw(Log::Dis::Patchy);
    }

    my $l = TrivialLogger->new( { ident => 'trivial', } );

    $l->mute();
    $l->log("a message");
    $l->unmute();
    $l->log("another message");
    $l->log_debug("debugging message");
    $l->debug(1);
    $l->log_debug("another debugging message");

Should produce something like this:

    [9121] another message
    [9121] another debugging message

=head1 DESCRIPTION

L<Log::Dis::Patchy> is the result of a head-on collision between my
appreciation for the simple set of standard behaviors embodied in
L<Log::Dispatchouli> and my frustration with how difficult it was to make it
use my sensible defaults instead of RJBS's (sensibly different) defaults.

It's pretty straightforward to string together the L<Log::Dispatch> components
to get the behavior you want in Project A and you can pretty much cut-and-paste
that into Project B with a couple of B specific changes (maybe you change an
output filename), ditto with Project C, and so on.  Even though
L<Log::Dispatch> isn't complicated, each Project becomes an opportunity to
waste energy screwing up in new and interesting ways.

If you're RJBS, you look at the various ways you've used L<Log::Dispatch>, whip
up a basic logging class with simple knobs that enable your use cases and
release it as L<Log::Dispatchouli>.  If you're anyone else and you can fit your
use case into RJBS's cubbies then you're good to go too.

If you'd rather use L<Log::Dispatch::Screen::Colored> instead of
L<Log::Dispatch::Screen> or want to use different callbacks or ... then you're
back to square one.  Being extensible is not L<Log::Dispatchouli>'s strong
suit.

L<Log::Dis::Patchy> gives you a clean way to package up
L<Log::Dispatch::Output> subclasses using your defaults and the knobs that you
find useful, to hook them into a L<Log::Dispatch> instance that is configured
the way that you like, and then wrap them up in something with a dead-simple
interface.  The resulting logger is very similar to what L<Log::Dispatchouli>
provides, in fact there's an example, L<Log::Dis::Patchy::Ouli>, that passes
L<Log::Dispatch>'s test suite.

In other words it does pretty much what L<Log::Dispatchouli> does, but it lets
you do it your way.

=head2 Comparison with L<Log::Dispatchouli>

=over 4

=item *

we use 'failure_is_fatal' where Log::Dispathouli uses 'fail_fatal'.

=item *

we use 'messages' and 'reset_messages' where Log::Dispathouli uses 'events'

  and 'clear_events'

=item *

we use debug as an accessor for the L</debug> attribute, it is therefor

  not available to be a shorthand for L</log_debug>.

=back

That said

=over 4

=item *

see C<examples/Dispatchouli> for a L<Log::Dis::Patchy> based re-implementation

  of L<Log::Dispatchouli> that is good enough to pass L<Log::Dispatchouli>'s
  test suite.

=item *

see C<examples/DispatchouliGlobal> for an example of using a

  L<Log::Dis::Patchy> based logger with L<Log::Dispatchouli::Global>.

=back

=head1 ATTRIBUTES

=head2 callbacks

A lazy arrayref of coderefs, added to the L<Log::Dispatch> object when it is
created.  Override/modify L</_build_callbacks> to provide your own defaults.

Callbacks are passed a hash containing the following keys:

    ( message => $log_message, level => $log_level )

and are expected to modify the message and then return a single scalar
containing that modified message.

See L<Log::Dispatch/CONSTRUCTOR> for more details.

See L<Log::Dis::Patchy::Helpers> for some helpful callback generators.

=head2 config_id

A lazy string, the name for this loggers config.  Rarely needed.  See
L</_build_config_id>.

=head2 debug

A read-write boolean attribute that controls debug logging.  Set it to 1 enable
logging via log_debug, set it to 0 to quietly drop log_debug messages.

Has a coercion that arranges that any input that evaluates to a true value sets
debug to 1 and otherwise sets it to 0.

See L</_build_debug>.

=head2 failure_is_fatal

A read-write boolean attribute that controls whether to die if logging a
messages fails.

Has a coercion that arranges that any input that evaluates to a true value sets
debug to 1 and otherwise sets it to 0.

See L</_build_failure_is_fatal>.

=head2 flogger

A lazy string, the name of the package that provides the C<flog> method, which
is used to flog messages before they are passed to L<Log::Dispatch>.

The package is automatically loaded via L<Class::Load/load_class>.

See </_build_flogger>.

=head2 ident

A required readonly string, the name of the thing logging.

=head2 muted

A boolean attribute, defaults to 0, that enables temporarily silencing logging.
Setting it to 1 to mutes (silences) logging.  See L</mute> and L</unmute>.

=head2 outputs

An arrayref of the information used to configure the set of outputs that are
added to the underlying L<Log::Dispatch> object.

C<outputs> is an arrayref of arrayrefs, each inner array ref contains two
scalars: a package name and a reference to a hashref of init_args for that
package.  E.g.

  [ [ AnOutput => { an_arg => 1 } ], [ OtherOutput => {} ] ]

In the name of brevity and laziness, this attribute is coerced via
L<Data::OptList/mkopt>.  The above example could be written as:

  [ AnOutput => { an_arg => 1 }, 'OtherOutput' ]

And really simple configurations only require the package names:

  [ qw( AnOutput AnotherOutput ) ]

Packages are loaded using L<Class::Load/load_class> and passed any supplied
init_args on instantiation.

See L<Data::OptList>.

See </_build_outputs>.

=head2 prefix

Either a coderef (which massages) or string which is prepended to) the log
message.  A coderef is called with the message string as its only argument and
is expected to return a string.

See L<_build_prefix>.

=head2 _dispatcher

Private.  Hands off.  "This is not the method you're looking for.  Move along."

A lazy C<InstanceOf['Log::Dispatch']> holds the L<Log::Dispatch> object to
which messages are sent.

=head2 _output_objs

Private.  Hands off.  Go away kid.

An arrayref of L<Log::Dis::Patchy::Output> consuming classes.  Used to build
L<_dispatcher> and as a stash of the classes that provided the
L<Log::Dispatch::Output> instances, e.g. for L</messages>.

=head1 METHODS

=head2 _build_callbacks

Default builder for L</callbacks>.  Returns a reference to an empty array.
Override/modify to provide your desired set of default callbacks.

=head2 _build_config_id

Default builder for L</config_id>.  Returns the value of the L</ident>
attribute.  Override/modify to supply a different default.

=head2 _build_debug

Default builder for L</debug>.  Returns 0.

=head2 _build_failure_is_fatal

Default builder for L</failure_is_fatal>.  Returns 1;

=head2 _build_flogger

Default builder for L</flogger>.  Returns 'String::Flogger'.  Override/modify
it to provide a different default.

=head2 mute

Sets L</mute> to 1.

=head2 unmute

Sets L</mute> to 0.

=head2 clear_prefix

Moo-provided clearer for L</prefix>.

=head2 _build__dispatcher

Default builder for L</_dispatcher>.  Creates a new L<Log::Dispatch> instance;
loads, instantiates, and adds the contents of L</_outputs> to the dispatcher's
set of outputs and adds the contents of L<_callback> to the dispatcher's
callbacks list.

=head2 log

Log a message.

If the first argument is a hashref it is used as a set of options.  Valid
options include:

=over 4

level  - Level at which to log the message.  Defaults to 'info'.
prefix - A prefix, as described in L</prefix>.

=back

Remaining arguments are flogged (see L</flogger>) and joined with spaces into a
single string.

Each prefix is applied to the message (see L</prefix>).

Almost, but not quite verbatim from Log::Dispatchouli.

=head2 log_info

Log a message at the B<error> level, just hands off to L</log>.

=head2 log_error

Log a message at the B<error> level.

If the first argument is a hashref it is taken to be a set of options.  In
addition to the options that L</log> accepts, valid options include:

=over 4

level - level at which to log the message, defaults to 'error'.

=back

Similar to L<Log::Dispatchouli::log_debug>.

=head2 log_debug

Log a debug message.  A no-op unless L</debug> evaluates to a true value.

If the first argument is a hashref it is taken to be a set of options.  In
addition to the options that L</log> accepts, valid options include:

=over 4

level - level at which to log the message, defaults to 'debug'.

=back

Verbatim from Log::Dispatchouli.

=head2 log_fatal

Log a fatal message.

If the first argument is a hashref it is taken to be a set of options.  In
addition to the options that L</log> accepts, valid options include:

=over 4

level - level at which to log the message, defaults to 'error'.
fatal - make message fatal, defaults to 1.

=back

Verbatim from Log::Dispatchouli.

=head2 messages

TODO use a role instead of can....

Returns an arrayref of log messages by walking across the set of output objects
and snarfing from any that maintain a stash.

See L</reset_messages>.

=head2 reset_messages

TODO use a role instead of can.

Walks across the set of output objects and resets (empties) the stashes of any
output objects that maintain one.

See L</messages>.

=head2 proxy

Return an LDP::Proxy instance with the caller as its parent.  Accepts a hashref
of options.  See L<Log::Dis::Patchy::Proxy>.

=head1 REQUIRES

=head2 _build_outputs

Builder for L</outputs>, returns a reference to the information described in
L</outputs>.

=head1 SEE ALSO

=over 4

=item *

L<Log::Dispatch>

=item *

L<Log::Dispatch::Output>

=item *

L<Log::Dispatchouli>

=item *

L<Log::Dispatchouli::Proxy>

=item *

L<Log::Dispatchouli::Global>

=item *

L<Data::OptList>

=back

=head1 AUTHOR

George Hartzell <hartzell@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by George Hartzell.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

